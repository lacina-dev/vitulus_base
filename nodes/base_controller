#!/usr/bin/python3

"""
### RUN motor config
python3 -m moteus.moteus_tool --target 1 --calibrate

### RUN moteus gui
python3 -m moteus_gui.tview --devices=1

#############   my test commands
conf set id.id 2 # change number for id 1,2,3,4
conf set servopos.position_min nan
conf set servopos.position_max nan
conf set servo.max_velocity 125.000000
conf set servo.max_position_slip 0.2
conf set servo.flux_brake_min_voltage 26.0
conf set servo.default_timeout_s 0.7
### NOW --- reconnect tview and then can save new id
conf write

### move
d pos nan 7 2 d2
d pos nan 10 1 d1 p1
d stop

"""

import time
import rospy
import asyncio
import math
import moteus
import threading
import sys
import signal
from std_msgs.msg import Float32, Bool
from vitulus_msgs.msg import Moteus_controller_state, Power_status
import traceback


class RobotSpec:
    FRONT_LEFT_ID = 1
    FRONT_RIGHT_ID = 2
    REAR_LEFT_ID = 3
    REAR_RIGHT_ID = 4
    REDUCER = 13
    WHEEL_DIA = 0.21  # meters
    ROTATION_DISTANCE = (WHEEL_DIA * math.pi) / REDUCER
    METER_ROTATION = 1 / ROTATION_DISTANCE
    MOT_RPS_TO_WHEEL_RAD = (2 * math.pi) / REDUCER
    WHEEL_RAD_TO_MOT_RPS = REDUCER / (2 * math.pi)
    TORQUE = 0.7  # Nm
    torque_recent = TORQUE
    reset_controller = False
    reset_rospy = False
    restart_controller = False


class ControllerState:
    def __init__(self, id):
        # 2 / {MODE(0x000): 3, POSITION(0x001): 0.0790252685546875,
        #      VELOCITY(0x002): 0.07530862092971802, TORQUE(0x003): 0.0, VOLTAGE(0x00d): 23.5,
        #      TEMPERATURE(0x00e): 29.0, FAULT(0x00f): 0}
        self.id = id
        self.stamp = time.time()
        self.mode = 0
        self.position = 0
        self.velocity = 0
        self.torque = 0
        self.voltage = 0
        self.temperature = 0
        self.fault = 0
        self.position_offset_dist = 0
        self.position_offset_ang = 0
        self.position_ang = 0
        self.position_distance = 0
        self.velocity_ang = 0
        self.velocity_distance = 0

    def set_values(self, state):
        self.stamp = time.time()
        self.mode = state.values[moteus.Register.MODE]
        self.position = (state.values[moteus.Register.POSITION] * RobotSpec.ROTATION_DISTANCE) - self.position_offset_dist
        self.velocity = state.values[moteus.Register.VELOCITY]
        self.torque = state.values[moteus.Register.TORQUE]
        self.voltage = state.values[moteus.Register.VOLTAGE]
        self.temperature = state.values[moteus.Register.TEMPERATURE]
        self.fault = state.values[moteus.Register.FAULT]
        self.position_ang = (state.values[moteus.Register.POSITION] * RobotSpec.MOT_RPS_TO_WHEEL_RAD) - self.position_offset_ang
        self.position_distance = (state.values[moteus.Register.POSITION] * RobotSpec.ROTATION_DISTANCE) - self.position_offset_dist
        self.velocity_ang = (state.values[moteus.Register.VELOCITY] * RobotSpec.MOT_RPS_TO_WHEEL_RAD) - self.position_offset_ang
        self.velocity_distance = (state.values[moteus.Register.VELOCITY] * RobotSpec.ROTATION_DISTANCE) - self.position_offset_dist

    def set_offset(self, state):
        self.position_offset_dist = (state.values[moteus.Register.POSITION] * RobotSpec.ROTATION_DISTANCE)
        self.position_offset_ang = (state.values[moteus.Register.POSITION] * RobotSpec.MOT_RPS_TO_WHEEL_RAD)
        # print("############################## {}".format(self.position_offset_dist))

    def get_status_msg(self, side=1):  # side -1 left, 1 right
        msg = Moteus_controller_state()
        msg.id = self.id
        msg.mode = self.get_mode(self.mode)
        msg.position = self.position * side
        msg.velocity = self.velocity * RobotSpec.ROTATION_DISTANCE * side
        msg.torque = self.torque * RobotSpec.REDUCER * side
        msg.voltage = self.voltage
        msg.temperature = self.temperature
        msg.fault = self.get_fault(self.fault)
        return msg

    def get_mode(self, code):
        if code == 0:
            return "STOPPED"
        elif code == 1:
            return "FAULT"
        elif code == 5:
            return "PWM"
        elif code == 6:
            return "VOLTAGE"
        elif code == 7:
            return "VOLTAGE_FOC"
        elif code == 8:
            return "VOLTAGE_DQ"
        elif code == 9:
            return "CURRENT"
        elif code == 10:
            return "POSITION"
        elif code == 11:
            return "TIMEOUT"
        elif code == 12:
            return "ZERO_VELOCITY"
        elif code == 13:
            return "STAY_WITHIN"
        else:
            return str(code)

    def get_fault(self, code):
        if code == 0:
            return "OK"
        elif code == 32:
            return "CALIBRATION_FAULT"
        elif code == 33:
            return "MOTOR_DRV_FAULT"
        elif code == 34:
            return "OVER_VOLTAGE"
        elif code == 35:
            return "ENCODER_FAULT"
        elif code == 36:
            return "MOTOR_NOT_CONFG"
        elif code == 37:
            return "PWM_CYCLE_OVERRUN"
        elif code == 38:
            return "OVER_TEMP"
        elif code == 39:
            return "OUTSIDE_LIMIT"
        else:
            return str(code)


class MotorController:
    def __init__(self, id_nr):
        self.id = id_nr
        self.c = moteus.Controller(self.id)
        self.state = ControllerState(self.id)
        self.velocity = 0
        # self.set_offset()

class BaseController:
    def __init__(self):
        self.c_front_left = MotorController(RobotSpec.FRONT_LEFT_ID)
        self.c_front_right = MotorController(RobotSpec.FRONT_RIGHT_ID)
        self.c_rear_left = MotorController(RobotSpec.REAR_LEFT_ID)
        self.c_rear_right = MotorController(RobotSpec.REAR_RIGHT_ID)

        # This will be updated by the ROS thread in the background.
        # The lock must be held when reading or writing it.
        self.lock = threading.Lock()
        self.current_request = None
        self.motors_switch = False
        self.motors_power_switch = None
        self.motors_switch_pub = None
        self.stop_controller = False
        self.stop_power = False
        self.start_controller = False
        self.start_power = False
        self.ros_ready = False
        self.controller_status = False
        self.pub_front_left_velocity = rospy.Publisher("/base/front_left_wheel_real_vel", Float32, queue_size=10)
        self.pub_front_right_velocity = rospy.Publisher("/base/front_right_wheel_real_vel", Float32, queue_size=10)
        self.pub_rear_left_velocity = rospy.Publisher("/base/rear_left_wheel_real_vel", Float32, queue_size=10)
        self.pub_rear_right_velocity = rospy.Publisher("/base/rear_right_wheel_real_vel", Float32, queue_size=10)
        self.pub_front_left_angle = rospy.Publisher("/base/front_left_wheel_angle", Float32, queue_size=10)
        self.pub_front_right_angle = rospy.Publisher("/base/front_right_wheel_angle", Float32, queue_size=10)
        self.pub_rear_left_angle = rospy.Publisher("/base/rear_left_wheel_angle", Float32, queue_size=10)
        self.pub_rear_right_angle = rospy.Publisher("/base/rear_right_wheel_angle", Float32, queue_size=10)
        self.pub_front_left_state = rospy.Publisher("/base/front_left_wheel_state", Moteus_controller_state, queue_size=10)
        self.pub_front_right_state = rospy.Publisher("/base/front_right_wheel_state", Moteus_controller_state, queue_size=10)
        self.pub_rear_left_state = rospy.Publisher("/base/rear_left_wheel_state", Moteus_controller_state, queue_size=10)
        self.pub_rear_right_state = rospy.Publisher("/base/rear_right_wheel_state", Moteus_controller_state, queue_size=10)
        self.timer_slow = None

    async def run(self):
        ## Run Moteus controller

        # Wait for the power module open the motor switch
        wait_int_counter = 0
        wait_int_nr = 10
        while not self.ros_ready:
            time.sleep(0.3)
            if (wait_int_nr == wait_int_counter):
                rospy.logwarn("Still waiting for Power module enable motor power output...")
                # send turn on message to power module again
                new_msg = Bool()
                new_msg.data = True
                self.motors_switch_pub.publish(new_msg)
                wait_int_counter = 0
            wait_int_counter +=1

        await self.c_front_left.c.set_stop()
        await self.c_front_right.c.set_stop()
        await self.c_rear_left.c.set_stop()
        await self.c_rear_right.c.set_stop()

        # self.c_front_left.state.set_offset(state_front_left)
        # self.c_front_right.state.set_offset(state_front_right)
        # self.c_rear_left.state.set_offset(state_rear_left)
        # self.c_rear_right.state.set_offset(state_rear_right)
        start_time = time.time()
        while True:

            if self.stop_controller:
                if self.controller_status:
                    rospy.logwarn("Controller shutting down...")
                    # if (self.c_front_left.c != None):
                    await self.c_front_left.c.set_stop()
                    await self.c_front_right.c.set_stop()
                    await self.c_rear_left.c.set_stop()
                    await self.c_rear_right.c.set_stop()

                    # self.c_front_left.state.set_offset(state_front_left)
                    # self.c_front_right.state.set_offset(state_front_right)
                    # self.c_rear_left.state.set_offset(state_rear_left)
                    # self.c_rear_right.state.set_offset(state_rear_right)
                    self.c_front_left.c = None
                    self.c_front_right.c = None
                    self.c_rear_left.c = None
                    self.c_rear_right.c = None
                    ## Set controllers status to Failed and zero
                    with self.lock:
                        self.c_front_left.state.mode = "FAILED"
                        self.c_front_left.state.position = 0.0
                        self.c_front_left.state.velocity = 0.0
                        self.c_front_left.state.torque = 0.0
                        self.c_front_left.state.voltage = 0.0
                        self.c_front_left.state.temperature = 0.0
                        self.c_front_left.state.fault = "off"
                    with self.lock:
                        self.c_front_right.state.mode = "FAILED"
                        self.c_front_right.state.position = 0.0
                        self.c_front_right.state.velocity = 0.0
                        self.c_front_right.state.torque = 0.0
                        self.c_front_right.state.voltage = 0.0
                        self.c_front_right.state.temperature = 0.0
                        self.c_front_right.state.fault = "off"
                    with self.lock:
                        self.c_rear_left.state.mode = "FAILED"
                        self.c_rear_left.state.position = 0.0
                        self.c_rear_left.state.velocity = 0.0
                        self.c_rear_left.state.torque = 0.0
                        self.c_rear_left.state.voltage = 0.0
                        self.c_rear_left.state.temperature = 0.0
                        self.c_rear_left.state.fault = "off"
                    with self.lock:
                        self.c_rear_right.state.mode = "FAILED"
                        self.c_rear_right.state.position = 0.0
                        self.c_rear_right.state.velocity = 0.0
                        self.c_rear_right.state.torque = 0.0
                        self.c_rear_right.state.voltage = 0.0
                        self.c_rear_right.state.temperature = 0.0
                        self.c_rear_right.state.fault = "off"
                    with self.lock:
                        self.stop_controller = False
                    with self.lock:
                        self.stop_power = True
                    with self.lock:
                        self.controller_status = False
                    rospy.logwarn("Controller is shutted down.")

            if self.start_controller:
                rospy.loginfo("Controller starting...")
                self.c_front_left.c = moteus.Controller(RobotSpec.FRONT_LEFT_ID)
                self.c_front_right.c = moteus.Controller(RobotSpec.FRONT_RIGHT_ID)
                self.c_rear_left.c = moteus.Controller(RobotSpec.REAR_LEFT_ID)
                self.c_rear_right.c = moteus.Controller(RobotSpec.REAR_RIGHT_ID)

                await self.c_front_left.c.set_stop()
                await self.c_front_right.c.set_stop()
                await self.c_rear_left.c.set_stop()
                await self.c_rear_right.c.set_stop()

                self.c_front_left.c.make_set_output_nearest(position=0.0)
                self.c_front_right.c.make_set_output_nearest(position=0.0)
                self.c_rear_left.c.make_set_output_nearest(position=0.0)
                self.c_rear_right.c.make_set_output_nearest(position=0.0)
                with self.lock:
                    self.start_controller = False
                    self.controller_status = True
                rospy.loginfo("Controller started.")

            ### Set controllers velocities and read states #######
            # front left
            with self.lock:
                vel = self.c_front_left.velocity * RobotSpec.WHEEL_RAD_TO_MOT_RPS * -1
            with self.lock:
                torq = RobotSpec.torque_recent
            if (self.c_front_left.c):
                await self.c_front_left.c.set_position(
                    position=math.nan,
                    velocity=vel,
                    feedforward_torque=-0.1,
                    kp_scale=0.7,
                    kd_scale=1,
                    maximum_torque=torq,
                    stop_position=None,
                    watchdog_timeout=None,
                    # velocity_limit=125,
                    # accel_limit=0.01,
                    query=False)
                state_front_left = await self.c_front_left.c.query()
                with self.lock:
                    self.c_front_left.state.set_values(state_front_left)

            # front right
            with self.lock:
                vel = self.c_front_right.velocity * RobotSpec.WHEEL_RAD_TO_MOT_RPS
            with self.lock:
                torq = RobotSpec.torque_recent
            if (self.c_front_right.c):
                await self.c_front_right.c.set_position(
                    position=math.nan,
                    velocity=vel,
                    feedforward_torque=-0.1,
                    kp_scale=0.7,
                    kd_scale=1,
                    maximum_torque=torq,
                    stop_position=None,
                    watchdog_timeout=None,
                    # velocity_limit=125,
                    # accel_limit=0.01,
                    query=False)
                # print("a2")
                state_front_right = await self.c_front_right.c.query()
                with self.lock:
                    self.c_front_right.state.set_values(state_front_right)

            # rear left
            with self.lock:
                vel = self.c_rear_left.velocity * RobotSpec.WHEEL_RAD_TO_MOT_RPS * -1
            with self.lock:
                torq = RobotSpec.torque_recent
            if (self.c_rear_left.c):
                await self.c_rear_left.c.set_position(
                    position=math.nan,
                    velocity=vel,
                    feedforward_torque=-0.1,
                    kp_scale=0.7,
                    kd_scale=1,
                    maximum_torque=torq,
                    stop_position=None,
                    watchdog_timeout=None,
                    # velocity_limit=125,
                    # accel_limit=0.01,
                    query=False)
                state_rear_left = await self.c_rear_left.c.query()
                with self.lock:
                    self.c_rear_left.state.set_values(state_rear_left)

            # rear right
            with self.lock:
                vel = self.c_rear_right.velocity * RobotSpec.WHEEL_RAD_TO_MOT_RPS
            with self.lock:
                torq = RobotSpec.torque_recent
            if (self.c_rear_right.c):
                await self.c_rear_right.c.set_position(
                    position=math.nan,
                    velocity=vel,
                    feedforward_torque=-0.1,
                    kp_scale=0.7,
                    kd_scale=1,
                    maximum_torque=torq,
                    stop_position=None,
                    watchdog_timeout=None,
                    # velocity_limit=125,
                    # accel_limit=0.01,
                    query=False)
                state_rear_right = await self.c_rear_right.c.query()
                with self.lock:
                    self.c_rear_right.state.set_values(state_rear_right)

            await asyncio.sleep(0.01)

    def publish_velocity(self):
        ## Publish controllers velocities
        msg = Float32()
        msg.data = self.c_front_left.state.velocity_ang * -1
        self.pub_front_left_velocity.publish(msg)
        msg.data = self.c_front_right.state.velocity_ang
        self.pub_front_right_velocity.publish(msg)
        msg.data = self.c_rear_left.state.velocity_ang * -1
        self.pub_rear_left_velocity.publish(msg)
        msg.data = self.c_rear_right.state.velocity_ang
        self.pub_rear_right_velocity.publish(msg)

    def publish_position(self):
        ## Publish controllers positions
        msg = Float32()
        msg.data = self.c_front_left.state.position_ang * -1
        self.pub_front_left_angle.publish(msg)
        msg.data = self.c_front_right.state.position_ang
        self.pub_front_right_angle.publish(msg)
        msg.data = self.c_rear_left.state.position_ang * -1
        self.pub_rear_left_angle.publish(msg)
        msg.data = self.c_rear_right.state.position_ang
        self.pub_rear_right_angle.publish(msg)

    def publish_state(self):
        ## Publish controllers state
        is_valid = time.time() - self.c_front_left.state.stamp
        if (is_valid < 1):
            msg = self.c_front_left.state.get_status_msg(-1)
            msg.header.stamp = rospy.Time.now()
            msg.name = "FRONT_LEFT"
            self.pub_front_left_state.publish(msg)
        is_valid = time.time() - self.c_front_right.state.stamp
        if (is_valid < 1):
            msg = self.c_front_right.state.get_status_msg(1)
            msg.header.stamp = rospy.Time.now()
            msg.name = "FRONT_RIGHT"
            self.pub_front_right_state.publish(msg)
        is_valid = time.time() - self.c_rear_left.state.stamp
        if (is_valid < 1):
            msg = self.c_rear_left.state.get_status_msg(-1)
            msg.header.stamp = rospy.Time.now()
            msg.name = "REAR_LEFT"
            self.pub_rear_left_state.publish(msg)
        is_valid = time.time() - self.c_rear_right.state.stamp
        if (is_valid < 1):
            msg = self.c_rear_right.state.get_status_msg(1)
            msg.header.stamp = rospy.Time.now()
            msg.name = "REAR_RIGHT"
            self.pub_rear_right_state.publish(msg)



    def callback_motor_power(self, msg):
        if msg.data:
            with self.lock:
                self.start_power = True
        else:
            with self.lock:
                self.stop_controller = True

    def callback_set_torque(self, msg):
        with self.lock:
            RobotSpec.torque_recent = msg.data / RobotSpec.REDUCER
        with self.lock:
            RobotSpec.TORQUE = msg.data / RobotSpec.REDUCER

    def callback_front_left_vel(self, msg):
        with self.lock:
            self.c_front_left.velocity = msg.data

    def callback_front_right_vel(self, msg):
        with self.lock:
            self.c_front_right.velocity = msg.data

    def callback_rear_left_vel(self, msg):
        with self.lock:
            self.c_rear_left.velocity = msg.data

    def callback_rear_right_vel(self, msg):
        with self.lock:
            self.c_rear_right.velocity = msg.data

    def callback_power_status(self, msg):
        with self.lock:
            self.motors_switch = msg.motor_out_switch

    # Stop controller if motor output switch off message for power module is received.
    def callback_pm_set_motor_switch(self, msg):
        if not msg.data:
            with self.lock:
                pass
                self.stop_controller = True

async def main():
    controller = BaseController()

    # Start ROS in a thread separate from the asyncio one.
    def start_ros():
        # Publisher to motor switch on the power module and subscriber for motor switch check.
        # global motors_power_switch
        controller.motors_switch_pub = rospy.Publisher("/pm/set_motor_switch", Bool, queue_size=10)
        controller.motors_power_switch = rospy.Subscriber('/pm/power_status', Power_status, controller.callback_power_status)

        rospy.init_node('base_controller', disable_signals=True)
        rospy.Subscriber('/base/front_left_wheel_vel', Float32, controller.callback_front_left_vel)
        rospy.Subscriber('/base/front_right_wheel_vel', Float32, controller.callback_front_right_vel)
        rospy.Subscriber('/base/rear_left_wheel_vel', Float32, controller.callback_rear_left_vel)
        rospy.Subscriber('/base/rear_right_wheel_vel', Float32, controller.callback_rear_right_vel)

        rospy.Subscriber('/base/motor_power', Bool, controller.callback_motor_power)
        pub_motor_power_state = rospy.Publisher("/base/motor_power_state", Bool, queue_size=10)

        rospy.Subscriber('/base/set_torque', Float32, controller.callback_set_torque)
        pub_get_torque_set = rospy.Publisher("/base/get_torque_set", Float32, queue_size=10)

        rospy.Subscriber('/pm/set_motor_switch', Bool, controller.callback_pm_set_motor_switch)
        rate = 50
        r = rospy.Rate(rate)  # Hz

        first_run = True
        controller.stop_power = True
        slow_counter = 0
        slow_limit = rate/2 ## 2x per second ToDo: refactor to timer
        rospy.loginfo("Moteus controller initialized.")
        while not rospy.is_shutdown():

            ## Turn off the motor switch in power module
            if controller.stop_power:
                new_msg = Bool()
                new_msg.data = False
                controller.motors_switch_pub.publish(new_msg)
                rospy.loginfo("Wait for Power module disable motor power output...")
                while controller.motors_switch:
                    time.sleep(0.3)
                rospy.loginfo("Motor power output disabled.")

                controller.stop_power = False
                if first_run:
                    time.sleep(1)
                    controller.start_power = True
                    first_run = False

            ## Turn on the motor switch in power module
            if controller.start_power:
                new_msg = Bool()
                new_msg.data = True
                controller.motors_switch_pub.publish(new_msg)
                rospy.loginfo("Wait for Power module enable motor power output...")
                while not controller.motors_switch:
                    time.sleep(0.3)
                rospy.loginfo("Motor power output enabled.")

                controller.start_power = False
                # let the conrollers in asyncio start too
                controller.start_controller = True
                controller.ros_ready = True
                controller.stop_controller = False

            ## Publish controllers positions
            controller.publish_position()
            ## Publish controllers velocities
            controller.publish_velocity()
            ## Publish controllers states
            if (slow_limit == slow_counter):
                controller.publish_state()
                slow_counter = 0
            slow_counter +=1

            #### over all status ####################
            new_msg = Bool()
            if controller.controller_status:
                if (RobotSpec.torque_recent == 0.0 or
                        controller.c_front_left.state.fault != 0 or
                        controller.c_front_right.state.fault != 0 or
                        controller.c_rear_left.state.fault != 0 or
                        controller.c_rear_right.state.fault != 0 or
                        controller.c_front_left.state.mode != 10 or
                        controller.c_front_right.state.mode != 10 or
                        controller.c_rear_left.state.mode != 10 or
                        controller.c_rear_right.state.mode != 10):
                    new_msg.data = False
                else:
                    new_msg.data = True
            else:
                new_msg.data = False

            pub_motor_power_state.publish(new_msg)

            new_msg = Float32()
            new_msg.data = RobotSpec.torque_recent * RobotSpec.REDUCER
            pub_get_torque_set.publish(new_msg)

            r.sleep()

    ros_thread = threading.Thread(target=start_ros)
    ros_thread.start()

    def signal_handler(event, handl):
        new_msg = Bool()
        new_msg.data = False
        controller.motors_switch_pub.publish(new_msg)
        rospy.loginfo("Node base_controller shutting down...")
        rospy.signal_shutdown("end")
        sys.exit(0)

    signal.signal(signal.SIGINT, signal_handler)

    # Run Moteus in asyncio
    try:
        await controller.run()
    except Exception as e:
        print(e)
        traceback.print_exc()
        rospy.logerr("Moteus controller failed!")
        signal_handler("", "")


if __name__ == "__main__":
    asyncio.run(main())
